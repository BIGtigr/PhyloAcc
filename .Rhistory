Q%*%Q%*%Q
Q%*%Q%*%Q%*%Q
t = 10
t[[1]] = Q
for(i in 2:10)
{
t[[i]] = t[[i-1]]%*%Q
}
t = list()
t[[1]] = Q
for(i in 2:10)
{
t[[i]] = t[[i-1]]%*%Q
}
t[[10]]
t = list()
t[[1]] = Q
x = t[[1]][,1]
for(i in 2:10)
{
t[[i]] = t[[i-1]]%*%Q
x <- rbind(x, t[[i]][,1])
}
matplot(x)
matplot(x,type="b")
Q = matrix(c(0.1,0.9,0,0,0.9,0.1,0,0,1),nrow=3)
t = list()
t[[1]] = Q
x = t[[1]][,1]
for(i in 2:10)
{
t[[i]] = t[[i-1]]%*%Q
x <- rbind(x, t[[i]][,1])
}
matplot(x,type="b")
Q = matrix(c(0.1,0.9,0,0,0.95,0.05,0,0,1),nrow=3)
t = list()
t[[1]] = Q
x = t[[1]][,1]
for(i in 2:10)
{
t[[i]] = t[[i-1]]%*%Q
x <- rbind(x, t[[i]][,1])
}
matplot(x,type="b")
Q = matrix(c(0.2,0.8,0,0,0.95,0.05,0,0,1),nrow=3)
t = list()
t[[1]] = Q
x = t[[1]][,1]
for(i in 2:10)
{
t[[i]] = t[[i-1]]%*%Q
x <- rbind(x, t[[i]][,1])
}
matplot(x,type="b")
?heatmap.2
??heatmap.2
?upper.tri
?subset
curve(dgamma(x,shape = 2,scale = 0.5),0,3)
curve(dgamma(x,shape = 4,scale = 0.25),0,3)
curve(dgamma(x,shape = 5,scale = 0.2),0,3)
curve(dgamma(x,shape = 4*4,scale = 0.25),0,3)
curve(dgamma(x,shape = 4*4,scale = 0.25),0,20)
curve(dgamma(x,shape = 2*4,scale = 0.5),0,20)
curve(dgamma(x,3.15*2,0.5),0,10)
curve(dgamma(x,3.15*2,scale=0.5),0,10)
curve(dgamma(x,5,scale=0.2),0,5)
data <- read.csv("Downloads/table.csv")
head(data)
dim(data)
data <- read.csv("Downloads/table.csv")
ratio = rep(1,dim(data[1]))
ratio1 = rep(1,dim(data[1]))
for(i in 2:dim(data)[1])
{
ratio[i] = data$Close[i]/data$Close[i-1]
ratio1[i] = data$Adj.Close[i]/data$Adj.Close[i-1]
}
ratio = rep(1,dim(data)[1])
ratio1 = rep(1,dim(data)[1])
for(i in 2:dim(data)[1])
{
ratio[i] = data$Close[i]/data$Close[i-1]
ratio1[i] = data$Adj.Close[i]/data$Adj.Close[i-1]
}
data <- cbind(data,ratio,ratio1)
head(data)
for(i in 2:dim(data)[1])
{
#ratio[i] = data$Close[i]/data$Close[i-1]
#ratio1[i] = data$Adj.Close[i]/data$Adj.Close[i-1]
div[i] = data$Close[i-1] - data$Close[i]*data$Adj.Close[i-1]/data$Adj.Close[i]
}
data <- cbind(data,div)
div = rep(1,dim(data)[1])
for(i in 2:dim(data)[1])
{
#ratio[i] = data$Close[i]/data$Close[i-1]
#ratio1[i] = data$Adj.Close[i]/data$Adj.Close[i-1]
div[i] = data$Close[i-1] - data$Close[i]*data$Adj.Close[i-1]/data$Adj.Close[i]
}
data <- cbind(data,div)
head(data)
data[which(div)>1e-6,]
data[which(abs(div)>1e-6),]
data[which(abs(div)>1e-3),]
for(i in 2:dim(data)[1])
{
#ratio[i] = data$Close[i]/data$Close[i-1]
#ratio1[i] = data$Adj.Close[i]/data$Adj.Close[i-1]
div[i] = -data$Close[i] + data$Close[i-1]*data$Adj.Close[i]/data$Adj.Close[i-1]
}
data <- cbind(data,div)
head(data)
data[which(abs(data[,11])>1e-3),]
data[which(abs(data[,11])>1e-3),]
div_r <-  read.csv("Downloads/table(1).csv")
div_r <-  read.csv("Downloads/table1.csv")
cbind(div_r,data[,c(1,11)])
cbind(div_r,data[which(data[,11]>0.11),c(1,11)])
cbind(div_r,data[which(data[,11]>0.001),c(1,11)])
data[which(abs(data[,11])>1e-3),]
cbind(div_r, data[which(abs(data[,11])>1e-3),11])
cbind(div_r, data[which(-data[,11])>1e-3),11])
cbind(div_r, data[which(data[,11])< -1e-3),11])
cbind(div_r, data[which(data[,11]< -1e-3),11])
for(i in 2:dim(data)[1])
{
#price[i] = price[i-1]*data$Close[i]/(price[i-1] + )
div[i-1] = data$Close[i] - data$Close[i-1]*data$Adj.Close[i]/data$Adj.Close[i-1]
}
data <- read.csv("Downloads/table.csv")
div = rep(1,dim(data)[1])
for(i in 2:dim(data)[1])
{
#price[i] = price[i-1]*data$Close[i]/(price[i-1] + )
div[i-1] = data$Close[i] - data$Close[i-1]*data$Adj.Close[i]/data$Adj.Close[i-1]
}
div = rep(0,dim(data)[1])
for(i in 2:dim(data)[1])
{
#price[i] = price[i-1]*data$Close[i]/(price[i-1] + )
div[i-1] = data$Close[i] - data$Close[i-1]*data$Adj.Close[i]/data$Adj.Close[i-1]
}
head(data)
cbind(div[which(div>1e-3)],div_r)
data[which(div>1e-3)]
data[which(div>1e-3),]
x <- rnorm(100)
y <- x + rnorm(100)
summary(lm(y~x))
xm <- c(rep(0,100),x)
ym <- c(rep(0,100),y)
summary(lm(ym~xm))
summary(lm(y~x+0))
summary(lm(ym~xm+0))
x <- rnorm(100)
y <- x + 2*rnorm(100)
summary(lm(y~x+0))
xm <- c(rep(0,100),x)
ym <- c(rep(0,100),y)
summary(lm(ym~xm+0))
fit1 <- lm(y~x+0))
fit1 <- lm(y~x+0)
fit2 <- lm(ym~xm+0)
fit1$residuals
sum(fit1^2)/sum(x^2)
sum(fit1$residuals^2)/sum(x^2)
x <- rnorm(200)
y <- x + 2*rnorm(200)
fit1 <- lm(y~x+0)
sum(fit1^2)
xm <- c(rep(0,100),x[1:100])
ym <- c(rep(0,100),y[1:100])
fit2 <- lm(ym~xm+0)
x <- rnorm(200)
y <- x + 2*rnorm(200)
fit1 <- lm(y~x+0)
xm <- c(rep(0,100),x[1:100])
ym <- c(rep(0,100),y[1:100])
fit2 <- lm(ym~xm+0)
summary(fit1)
summary(fit2)
x <- rnorm(2000)
y <- x + 2*rnorm(2000)
fit1 <- lm(y~x+0)
xm <- c(rep(0,1000),x[1:1000])
ym <- c(rep(0,1000),y[1:1000])
fit2 <- lm(ym~xm+0)
summary(fit2)
summary(fit1)
x <- rnorm(20000)
y <- x + 2*rnorm(20000)
fit1 <- lm(y~x+0)
xm <- c(rep(0,5000),x[1:15000])
ym <- c(rep(0,5000),y[1:15000])
fit2 <- lm(ym~xm+0)
summary(fit1)
summary(fit2)
sum(fit1$residuals^2)/sum(x^2)
sum(fit2$residuals^2)/sum(x^2)
sum(fit2$residuals^2)/sum(xm^2)
x <- rnorm(200)
y <- x + 2*rnorm(200)
fit1 <- lm(y~x+0)
xm <- c(rep(0,50),x[1:150])
ym <- c(rep(0,50),y[1:150])
fit2 <- lm(ym~xm+0)
xl <- x[1:150]
yl <- y[1:150]
fit3 <- lm(yl~xl+0)
summary(fit1)
summary(fit2)
summary(fit3)
0.1622/0.1404
sqrt(200/150)
x <- rnorm(200)
y <- x + 2*rnorm(200)
xm <- c(rep(0,100),x[1:100])
t.test(xm)
t.test(x)
xl <- x[1:100]
yl <- y[1:100]
t.test(xl)
x <- rnorm(400)
y <- x + 2*rnorm(400)
fit1 <- lm(y~x+0)
xm <- c(rep(0,200),x[1:200])
ym <- c(rep(0,200),y[1:200])
fit2 <- lm(ym~xm+0)
xl <- x[1:200]
yl <- y[1:200]
t.test(xl)
t.test(xm)
199/99
fit3 <- lm(yl~xl+0)
x <- rnorm(200)
y <- x + 2*rnorm(200)
fit1 <- lm(y~x+0); summary(fit1)
xm <- c(rep(0,100),x[1:100])
ym <- c(rep(0,100),y[1:100])
fit2 <- lm(ym~xm+0); summary(fit2)
xl <- x[1:200]
yl <- y[1:200]
fit3 <- lm(yl~xl+0); summary(fit3)
xl <- x[1:100]
yl <- y[1:100]
fit3 <- lm(yl~xl+0); summary(fit3)
xl <- rnorm(100)
yl <- xl + 2*rnorm(100)
x = c(xl,xl)
y = c(yl,yl)
fit1 <- lm(y~x+0); summary(fit1)
xm <- c(rep(0,100),xl)
ym <- c(rep(0,100),yl)
fit2 <- lm(ym~xm+0); summary(fit2)
fit3 <- lm(yl~xl+0); summary(fit3)
xl <- rnorm(100)
yl <- xl + 10*rnorm(100)
x = c(xl,xl)
y = c(yl,yl)
fit1 <- lm(y~x+0); summary(fit1)
xm <- c(rep(0,100),xl)
ym <- c(rep(0,100),yl)
fit2 <- lm(ym~xm+0); summary(fit2)
fit3 <- lm(yl~xl+0); summary(fit3)
b = c(-1,-2)
min(b[b>0])
a = matrix(c(sqrt(2), 0 ,1, 0, sqrt(2), 1, 1, 1, sqrt(2)), nrow =3)
a
eigen(a)
sqrt
sqrt(2)/2
?dexp
?rgamma
## problem 1
x = seq(0, 1, .1); y = seq(0, 1, .1)
zfun <- function(a, b) {
return (a+b)
}
z <- outer(x, y, FUN="zfun")
library(rgl)
persp3d(x, y, z, col="skyblue")
n = 100
u = runif(n, 0, 1)
x = -log(1-u)
mean(x); var(x); mean(x>mean(x))
exp(-1)
n = 10000
u = runif(n, 0, 1)
x = -log(1-u)
mean(x); var(x); mean(x>mean(x))
mu_0 = .3
xbar = mean(x)
s = sd(x)
n = length(x)
tstat = (xbar-mu_0)/(s/sqrt(n))
df = n-1
prob = (1 - pt(tstat, df))*2
prob = pt(tstat, df)*2
prob
prob
curve(dt(x, df))
curve(dt(x, df), from = -2, to =2)
tstat
t.test(x, alternative = "two.sided", mu = mu_0)
xbar
x = c(0.593, 0.142, 0.329, 0.691, 0.231, 0.793, 0.519, 0.392, 0.418)
# hand calculation
mu_0 = .3
xbar = mean(x)
s = sd(x)
n = length(x)
tstat = (xbar-mu_0)/(s/sqrt(n))
df = n-1
prob = (1 - pt(tstat, df))*2
prob = pt(tstat, df)*2
curve(dt(x, df), from = -2, to =2)
prob
t.test(x, alternative = "two.sided", mu = mu_0)
abline(v=tstat, col=2,lty=2)
tstat
curve(dt(x, df), from = -3, to =3)
abline(v=tstat, col=2,lty=2)
install.packages(c("flexmix", "Rcpp", "RcppArmadillo"))
install.packages(c("Rook", "rjson", "Cairo", "RColorBrewer", "edgeR", "quantreg", "RMTstat", "extRemes", "pcaMethods", "BiocParallel"))
source("https://bioconductor.org/biocLite.R")
biocLite()
biocLite(c("edgeR", "pcaMethods", "BiocParallel"))
set.seed(12345)
nsims <- 100000
s2.sim <- s.sim <- rep(NA, nsims)
n <- 15
for(i in 1:nsims){
randsample <- rnorm(n, mean = 0, sd = 2)
s2.sim[i] <- var(randsample)
s.sim[i] <- sqrt(s2.sim[i])
}
mean(s2.sim)
mean(s.sim)
c(var(s2.sim), sd(s2.sim))
c(var(s.sim), sd(s.sim))
hist(s2.sim)
hist(s.sim)
curve(dgamma(x, 2, 2))
curve(dgamma(x, 2, 2), to = 5)
curve(dgamma(x, 4, 4), to = 5)
curve(dgamma(x, 3, 3), to = 5)
curve(dgamma(x, 1.25, 5), to = 2)
curve(dgamma(x, 4, 4), to = 3)
require(devtools)
devtools::install_github('hms-dbmi/scde', build_vignettes = FALSE)
curve(dgamma(x,nprior_a, scale =  nprior_b ), to = 5)
nprior_a = 15; nprior_b = 0.1;  #around 1
cprior_a = 5; cprior_b = 0.02;  #around ratio
curve(dgamma(x,nprior_a, scale =  nprior_b ), to = 5)
curve(dgamma(x,cprior_a, scale =  cprior_b ))
cprior_a = 5; cprior_b = 0.04;  #around ratio
curve(dgamma(x,cprior_a, scale =  cprior_b ))
cprior_a = 4; cprior_b = 0.05;  #around ratio
curve(dgamma(x,cprior_a, scale =  cprior_b ))
abline(v = 1/3.15657)
cprior_a = 4; cprior_b = 0.1;  #around ratio
curve(dgamma(x,cprior_a, scale =  cprior_b ))
abline(v = 1/3.15657)
cprior_a = 5; cprior_b = 0.08;  #around ratio
curve(dgamma(x,cprior_a, scale =  cprior_b ))
abline(v = 1/3.15657)
abline(v = qgamma(0.95,cprior_a, scale =  cprior_b), col=3, lty=2)
abline(v = qgamma(0.05,cprior_a, scale =  cprior_b), col=3, lty=2)
curve(dgamma(x,nprior_a, scale =  nprior_b ), to = 5)
abline(v = 1, col=2)
abline(v = qgamma(0.95,nprior_a, scale =  nprior_b), col=3, lty=2)
abline(v = qgamma(0.05,nprior_a, scale =  nprior_b), col=3, lty=2)
nprior_a = 10; nprior_b = 0.1;  #around 1
curve(dgamma(x,nprior_a, scale =  nprior_b ), to = 5)
abline(v = 1, col=2)
abline(v = qgamma(0.95,nprior_a, scale =  nprior_b), col=3, lty=2)
abline(v = qgamma(0.05,nprior_a, scale =  nprior_b), col=3, lty=2)
nprior_a = 10; nprior_b = 0.12;  #around 1
curve(dgamma(x,nprior_a, scale =  nprior_b ), to = 5)
abline(v = 1, col=2)
abline(v = qgamma(0.95,nprior_a, scale =  nprior_b), col=3, lty=2)
abline(v = qgamma(0.05,nprior_a, scale =  nprior_b), col=3, lty=2)
nprior_a = 8; nprior_b = 0.15;  #around 1
cprior_a = 5; cprior_b = 0.08;  #around ratio
curve(dgamma(x,nprior_a, scale =  nprior_b ), to = 5)
abline(v = 1, col=2)
abline(v = qgamma(0.95,nprior_a, scale =  nprior_b), col=3, lty=2)
abline(v = qgamma(0.05,nprior_a, scale =  nprior_b), col=3, lty=2)
??microbenchmark
library(Seurat)
?Setup
?FindClusters
Q =  matrix(c(-0.891314, 0.108827, 0.630590, 0.151897, 0.150099, -1.149905, 0.130070,0.869737,0.869737,0.130070,-1.149905,
0.150099, 0.151897, 0.630590, 0.108827, -0.891314),nrow=4, byrow=T)
rowSums(Q^2)
colSums(Q^2)
for(i in 1:4) Q[i,i] <- -sum(Q[i,-i])
eigenvec <- eigen(Q)$vectors
eigenval <-  eigen(Q)$values
eigen_inv <- solve(eigenvec)
eigenval
curve(dgamma(x,5,0.04))
curve(dgamma(x,5,1/0.04), to=1)
curve(dgamma(x,10,0.2), to=5)
curve(dgamma(x,10,1/0.2), to=5)
curve(dgamma(x,5,1/0.04), add=T)
curve(dgamma(x,5,1/0.04), to=5)
curve(dgamma(x,10,1/0.2), add=TRUE)
curve(dgamma(x,5,1/0.02), add=T, col=2)
curve(dgamma(x,15,1/0.1), add=T, col=2)
install.packages("~/Onedrive/OneDrive - Harvard University/scRNASeq/DIMMSC_0.2.0.tar.gz", repos = NULL, type = "source")
install.packages("RcppArmadillo")
remove("RcppArmadillo")
remove.packages("RcppArmadillo")
library("RcppArmadillo")
install.packages("RcppArmadillo")
library("RcppArmadillo")
install.packages("~/Onedrive/OneDrive - Harvard University/scRNASeq/DIMMSC_0.2.0.tar.gz", repos = NULL, type = "source")
tree <- list() # Empty list to hold trees
timeCoal <- c() # Empty vector to hold coalescence times
for (i in 1:10000){ # Number of replicates - will take a few seconds
tree[i] <- sim.coaltree(10,0.02) # Simulate a coalescence tree
tree[i] <- paste(tree[i], ";", sep="") # Adds ; to end of parenthetical tree
timeCoal[i] <- max(branching.times(read.tree(text=tree[[i]])))} # Saves coalescence time (branching time at root)
#
hist(timeCoal, xlab="Time for coalescence") # Histogram of coalescence times
library("phybase")
tree <- list() # Empty list to hold trees
timeCoal <- c() # Empty vector to hold coalescence times
for (i in 1:10000){ # Number of replicates - will take a few seconds
tree[i] <- sim.coaltree(10,0.02) # Simulate a coalescence tree
tree[i] <- paste(tree[i], ";", sep="") # Adds ; to end of parenthetical tree
timeCoal[i] <- max(branching.times(read.tree(text=tree[[i]])))} # Saves coalescence time (branching time at root)
#
hist(timeCoal, xlab="Time for coalescence") # Histogram of coalescence times
#
mean(timeCoal) # Which is close to??????
sum(1/seq(1,10))
sum(1/seq(1,10))*0.02
seq(1,9)
sum(1/seq(1,9))*0.02
setwd("~/Phd_2/Bird")
library(coda)
postZ <- read.table("mCE967994/result/longcneeseqs_nocore_rate_postZ_1.txt", header=T)
offset = 4 + 83
E = dim(postZ)[2]
Z = unlist(postZ[1,])
posteriorZ <- rbind( Z[seq(offset + 2,E,by = 4)],Z[seq(offset +3,E,by = 4)],
Z[seq(offset +4,E,by = 4)]) # get posterior of z (only 1???2???3)
source('~/GitHub/PhyloAcc/R/drawAlign_function.R', echo=TRUE)
treeData <- prepare_data(c())
treeData <- prepare_data()
setwd("~/GitHub/PhyloAcc")
treeData <- prepare_data()
treeData$target_species <- c("strCam","rhePen","rheAme","casCas","droNov","aptRow","aptHaa","aptOwe","anoDid")
View(postZ)
postZ <- read.table("mCE967994/result/longcneeseqs_nocore_rate_postZ_1.txt", header=T)
postZ <- read.table("../../Phd_2/Bird/mCE967994/result/longcneeseqs_nocore_rate_postZ_1.txt", header=T)
offset = 4 + 83
plotZPost(unlist(postZ[1,]), treeData, target_species=treeData$target_species,  offset=offset)
postZ[,1:10]
E = dim(postZ)[2]
Z = unlist(postZ[1,c(1:3, (offset+1):E]))
Z = unlist(postZ[1,c(1:3, (offset+1):E)])
postZ[1,c(1:3, (offset+1):E)]
plotZPost(Z, treeData, target_species=treeData$target_species)
treeData <- prepare_data("/Users/hzr/Phd_2/Bird/Data/neut_ver3_final.named.mod2", species_name = "/Users/hzr/Phd_2/Bird/mCE967994/result/longcneeseqs_nocore_species_names.txt")
plotZPost(Z, treeData, target_species=treeData$target_species)
treeData$node_idx
E = length(Z)
posterior_z <- rbind( Z[seq(offset + 2,E,by = 4)],Z[seq(offset +3,E,by = 4)],
Z[seq(offset +4,E,by = 4)]) # get posterior of z (only 1???2???3)
# get number of losses by posterior of Z
#loss = sum(posterior_z[3, 1:length(species)]) - sum(posterior_z[3, -1:-length(species)])
posterior_z <- posterior_z[,treeData$node_idx]
posterior_z <- posterior_z[,treeData$tree$edge[,2]] # reorder z by edges
offset=3
E = length(Z)
posterior_z <- rbind( Z[seq(offset + 2,E,by = 4)],Z[seq(offset +3,E,by = 4)],
Z[seq(offset +4,E,by = 4)]) # get posterior of z (only 1???2???3)
# get number of losses by posterior of Z
#loss = sum(posterior_z[3, 1:length(species)]) - sum(posterior_z[3, -1:-length(species)])
posterior_z <- posterior_z[,treeData$node_idx]
posterior_z <- posterior_z[,treeData$tree$edge[,2]] # reorder z by edges
posterior_z
plot(mytree)
mean_z <- colSums(posterior_z * 1:3);
rbPal <- colorRampPalette(c('gray','purple','springgreen3','firebrick1'))
mytree= treeData$tree
mytree$edge.length <-  mytree$edge.length*(posterior_z[1,] + posterior_z[2,] * ratio1 + posterior_z[3,]* ratio2)
nr = postZ[1, 2]; cr = postZ[1, 3]; b = postZ[1, 4]
postZ[,1:5]
Z[2] = nr/(1 - exp(-nr))
Z[3] = cr/(1 - exp(-cr))
Z[,1:5]
Z[1:5]
plotZPost(Z, treeData, target_species=treeData$target_species)
target_species <- c("strCam","rhePen","rheAme","casCas","droNov","aptRow","aptHaa","aptOwe")# flyless species
plotZPost(Z, treeData, target_species=target_species)
target_species <- c("strCam","rhePen","rheAme","casCas","droNov","aptRow","aptHaa","aptOwe","anoDid")
tit = paste("BF1:", round(lk$log_ratio), "BF2:",round(lk$BF2), "  ")
score <- read.table("../../Phd_2/Bird/mCE967994/result/longcneeseqs_nocore_elem_lik.txt", header=T)
score
score$BF2 = score$loglik_RES - score$loglik_all
lk = score[1,]
tit = paste("BF1:", round(lk$log_ratio), "BF2:",round(lk$BF2), "  ")
tit
plotZPost(Z, treeData, target_species=treeData$target_species, tit = tit)
plotZPost(Z, treeData, target_species=target_species, tit = tit)
